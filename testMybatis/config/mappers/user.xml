<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">
	<!-- mybatis中没有parameterClass和resultClass，现在都换成了xxxxType -->
	<!-- #{}是占位符 相当于 ？ -->
	<select id="getUserById1" parameterType="int" resultType="com.lj.mybatis.model.User">
		select * from mb_user where id = #{value}
	</select>
	
	<select id="getUserById2" parameterType="hashMap" resultType="com.lj.mybatis.model.User">
		select * from mb_user where id = #{id}
	</select>
	
	<select id="getUserByName1" parameterType="hashMap" resultType="com.lj.mybatis.model.User">
		select * from mb_user where userName like #{userName}
	</select>
	
	<!-- ${}指的是拼接,如果传递的参数是简单参数，那么${}中就只能用value，即 ${value}; 我们这儿用的是复杂参数 map -->
	<select id="getUserByName2" parameterType="hashMap" resultType="com.lj.mybatis.model.User">
		select * from mb_user where userName like '%${userName}%'
	</select>
	
	<!-- 经过测试 order默认值="AFTER"，并且 SELECT @@IDENTITY AS id函数一样使用-->
	<insert id="insertUser" parameterType="com.lj.mybatis.model.User">
		insert into mb_user(userName,age) values (#{userName},#{age})
		<selectKey  keyProperty="id"  resultType="int">
			SELECT @@IDENTITY AS id
		</selectKey>
	</insert>
	
	<insert id="insertUser1" parameterType="com.lj.mybatis.model.User">
		insert into mb_user(userName,age) values (#{userName},#{age})
		<selectKey  keyProperty="id" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert> 
		
	<delete id="delettUserById" parameterType="int">
		delete from mb_user where id = #{id};
	</delete>
	
	<update id="updateUser1" parameterType="com.lj.mybatis.model.User">
		update mb_user set userName = #{userName} where id = #{id};
	</update>
</mapper>


